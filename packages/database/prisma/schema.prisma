datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output = "../generated/client"
}

model User {
  id                  String    @id @default(uuid())
  name                String
  email               String
  emailVerified       Boolean @default(false)
  image               String?
  createdAt           DateTime
  updatedAt           DateTime
  phoneNumber         String?
  phoneNumberVerified Boolean @default(false)
  profileComplete     Boolean @default(false)
  sessions            Session[]
  accounts            Account[]
  paymentMethods      PaymentMethod[]
  voiceSamples        VoiceSample[]
  paymentsSent        Payment[]        @relation("PaymentsSent")
  paymentsReceived    Payment[]        @relation("PaymentsReceived")

  @@unique([email])
  @@unique([phoneNumber])
  @@map("user")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
  @@unique([identifier])
}

enum PaymentMethodType {
  debit_card
  credit_card
  bank
  upi_id
}

model PaymentMethod {
  id          String      @id @default(uuid())
  userId      String      @map("user_id")
  type        PaymentMethodType
  details     Json
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  archivedAt DateTime? @map("archived_at")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments    Payment[]
}

model VoiceSample {
  id        String   @id @default(uuid())
  userId    String
  sampleKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  pending
  completed
  failed
  disputed
  cancelled
  disputed_rejected
  disputed_accepted
  refunded
}

model Payment {
  id              String         @id @default(uuid())
  fromUserId      String         @map("from_user_id")
  toUserId        String         @map("to_user_id")
  paymentMethodId String

  amount          Float
  date            DateTime       @default(now())
  status          PaymentStatus  @default(pending)
  description     String?

  from            User           @relation("PaymentsSent", fields: [fromUserId], references: [id], onDelete: Cascade)
  to              User           @relation("PaymentsReceived", fields: [toUserId], references: [id], onDelete: Cascade)
  paymentMethod   PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
}
